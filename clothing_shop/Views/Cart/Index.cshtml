
@model Shop_Models.ViewModels.ProductUserVM

@using Shop_Utility


@if (Model.ProductList.Count() > 0)
{
	<form method="post">
		<div class="container mt-4">
			<div class="card">
				<div class="card-header d-flex justify-content-between align-items-center">
					<span>Shopping Cart</span>
					<a asp-action="Index" asp-controller="Home" class="btn btn-outline-dark">Continue Shopping</a>
				</div>

				<div class="card-body">
					<br />
					<hr />
					@{
						var orderTotal = 0.0;
						
					}

					@for (int i = Model.ProductList.Count() - 1; i >= 0; i--)
					{
						<input hidden asp-for="@Model.ProductList[i].Id" />
						<input hidden asp-for="@Model.ProductList[i].Size" />
						<input hidden asp-for="@Model.ProductList[i].Size.Id" />
						<input hidden asp-for="@Model.ProductList[i].Size.Name" />
						<input hidden asp-for="@Model.ShoppingCartList[i].ProductId" />
						<input hidden asp-for="@Model.ShoppingCartList[i].SizeId" />
						
						<div class="row">
							<div class="col-md-4">
								<a asp-action="Details" asp-controller="Home" asp-route-id="@Model.ProductList[i].Id">
									<img src="@WC.ImagePath@Model.ProductList[i].Image" class="rounded mx-auto d-block" style="width: 55%; height: auto;" alt="Product Image" />
								</a>
							</div>
							<div class="col-md-4">
								<a asp-action="Details" asp-controller="Home" asp-route-id="@Model.ProductList[i].Id" class="text-dark text-decoration-none">
									<h4>@Model.ProductList[i].ProductName</h4>
								</a>
								<p>@Model.ProductList[i].ProductDescription</p>
								<p><strong>Price:</strong> €@Model.ProductList[i].Price</p>
								<p><strong>Size:</strong> @Model.ProductList[i].Size.Name</p>
								@{
									int sizeId = Model.ProductList[i].Size.Id;
									int productId = Model.ProductList[i].Id;
									int availableQty = Model.AvailableQuantities.ContainsKey(productId) && Model.AvailableQuantities[productId].ContainsKey(sizeId) ? Model.AvailableQuantities[productId][sizeId] : 0;

									// if (sizeId == Model.ProductList[i].Size.Id)
									// {
									// 	<p><strong>Available Quantity:</strong> @availableQty</p>
									// }
								}
								<p><strong>Qty:</strong>
									<select asp-for="@Model.ShoppingCartList[i].Qty" class="qty"
									id="qty-@Model.ProductList[i].Id" data-price="@Model.ProductList[i].Price" data-max-qty="@availableQty">
										@for (int j = 1; j <= (availableQty >= 10 ? 10 : availableQty); j++)
										{
											<option value="@j">@j</option>
										}
									</select>
									<span id="warning-message-@Model.ProductList[i].Id" class="warming-message text-danger"></span>
								</p>
								<br /><br />
								<div class="col-md-4">
									<a asp-action="Remove" asp-route-productId="@Model.ProductList[i].Id" asp-route-sizeId="@Model.ProductList[i].Size.Id" class="btn btn-danger btn-sm">
										Delete from Cart
									</a>
								</div>
								<br />
							</div>
							<div class="col-md-4">
								<div class="text-right">
									<p id="totalPrice-@Model.ProductList[i].Id" data-price="@Model.ProductList[i].Price">€@(@Model.ProductList[i].Price * @Model.ShoppingCartList[i].Qty)</p>
								</div>
							</div>
						</div>
						orderTotal += @Model.ProductList[i].Price * @Model.ShoppingCartList[i].Qty;
						<br />
						<hr />

					}
				</div>
				
				<div class="card-footer">
					<div class="row justify-content-end">

						<div class="col-6 col-md-3">
							<p><strong>Order Total:</strong><span id="orderTotal">€@Model.ProductList.Select((p, i) => p.Price * Model.ShoppingCartList[i].Qty).Sum()</span></p>
							<div class="row">
								<div class="col-6">
									<button type="submit" class="btn btn-dark form-control ">
										<span>Continue</span>
									</button>
								</div>
							</div>
						</div>
					</div>
				</div>

			</div>
		</div>
	</form>
}
else
{
	<br />
	<p>Cart is empty!</p>
}

@section Scripts {
	<script>
		$(document).ready(function () {
			$('.qty').each(function () {
				var productId = $(this).attr('id').split('-')[1];
				var qty = $(this).val();
				var maxQty = parseInt($('#qty-' + productId).data('max-qty'));
				var price = parseFloat($('#totalPrice-' + productId).data('price'));

				if (qty >= maxQty) {
					$('#warning-message-' + productId).text('Selected maximum quantity');
				}
			});

			$('.qty').change(function () {
				var productId = $(this).attr('id').split('-')[1];
				var qty = $(this).val();
				var maxQty = parseInt($('#qty-' + productId).data('max-qty'));
				var price = parseFloat($('#totalPrice-' + productId).data('price'));
				$('#totalPrice-' + productId).text('€' + (price * $(this).val()));
				updateOrderTotal();

				if (qty >= maxQty) {
					$(this).val(maxQty);
					qty = maxQty;
					$('#warning-message-' + productId).text('Selected maximum quantity');
				}
				else {
					$('#warning-message-' + productId).text('');
				}

				$('#totalPrice-' + productId).text('€' + (price * qty));
				updateOrderTotal();
			});
		});

		function updateOrderTotal() {
			var orderTotal = 0;
			$('.qty').each(function () {
				var productId = $(this).attr('id').split('-')[1];
				var qty = parseInt($(this).val());

				var price = parseFloat($('#totalPrice-' + productId).data('price'));
				orderTotal += price * qty;
			});
			$('#orderTotal').text('€' + Math.floor(orderTotal));
		}
	</script>

}